//
// Description : This retrieve all unaknowledged alerts
// Input :  read_token (For alert storage)
//          alert_filter (Map that filter alerts)
//          end (Instant of the last alert to be taken into account)
//          depth (Period to watch)
//          notify_parameters (Notify macro parameters as an array)
//          notify_macro (Notify macro to trigger for every non acknoledged alert)
// Output : [ GTS ] (One per alert with unaknowledged ticks) 
//
<%
  'mc2bank.alert.notify_macro' STORE
  'mc2bank.alert.notify_parameters' STORE
  'mc2bank.alert.depth' STORE
  'mc2bank.alert.end' STORE
  'mc2bank.alert.alert_filter' STORE
  'mc2bank.alert.token' STORE

  <%
    MAP-> ->MAP MSORT
    MAP-> '' SWAP TOLONG JOIN
   'UTF-8' ->BYTES
    SHA1
    ->HEX
  %> 'mc2bank.alert.hash' STORE

  
  // Fetch alerts
  [ $mc2bank.alert.token '~alert.(level|ack|details)' $mc2bank.alert.alert_filter $mc2bank.alert.end $mc2bank.alert.depth ] FETCH

  // Filter differents parts of the alerts into differents vars
  DUP DUP
  // Here we compact the level part of the alert to only keep changing state
  [ SWAP [] 'alert.level' filter.byclass ] FILTER @MC2Bank/gt/compact_time 'mc2bank.alert.level' STORE
  [ SWAP [] 'alert.details' filter.byclass ] FILTER 'mc2bank.alert.details' STORE
  [ SWAP [] 'alert.ack' filter.byclass ] FILTER 'mc2bank.alert.ack' STORE

  // Generate map to store details and acks for performance
  {} 'mc2bank.alert.details_m' STORE
  {} 'mc2bank.alert.ack_m' STORE
  $mc2bank.alert.details <% $mc2bank.alert.details_m SWAP DUP LABELS $mc2bank.alert.hash EVAL PUT DROP %> FOREACH
  $mc2bank.alert.ack <% $mc2bank.alert.ack_m SWAP DUP LABELS $mc2bank.alert.hash EVAL PUT DROP %> FOREACH

  $mc2bank.alert.level
  // Running through every alert
  <%
    'mc2bank.alert.selected_level' STORE
    // Retrieve alert selector
    $mc2bank.alert.selected_level LABELS '.app' REMOVE DROP 'mc2bank.alert.selector' STORE
    $mc2bank.alert.selected_level LABELS  $mc2bank.alert.hash EVAL 'mc2bank.alert.key' STORE

    // Retrieve details matching selector (we don't use the filter framework has it's not effiscient enough here)
    $mc2bank.alert.details_m $mc2bank.alert.key GET DUP <% ISNULL %> <% DROP NEWGTS 'mc2bank.alert.alert.details' RENAME $mc2bank.alert.selector RELABEL %> IFT 'mc2bank.alert.selected_details' STORE

    // Retrieve acks matching selector (we don't use the filter framework has it's not effiscient enough here)
    $mc2bank.alert.ack_m $mc2bank.alert.key GET DUP <% ISNULL %> <% DROP NEWGTS 'alert.ack' RENAME $mc2bank.alert.selector RELABEL %> IFT 'mc2bank.alert.selected_ack' STORE
    
    // Filter unacknoledged ticks
    [
      // Get alert ack time serie
      [ $mc2bank.alert.selected_ack ]
      [ $mc2bank.alert.selected_level ]
      []
      op.negmask
    ] APPLY
    
    TICKS
    
    // Running through every ticks
    <%
      'mc2bank.alert.tick' STORE
      { 
        'tick' $mc2bank.alert.tick 
        'alert' $mc2bank.alert.selector 
        'level' $mc2bank.alert.selected_level $mc2bank.alert.tick ATTICK 4 GET
        'details' $mc2bank.alert.selected_details $mc2bank.alert.tick ATTICK 4 GET // Retrieve the value at the tick we are interested in
                  <% DUP ISNULL ! %> <% JSON-> %> IFT
      } $mc2bank.alert.notify_parameters LIST-> DROP $mc2bank.alert.notify_macro EVAL
    %> FOREACH
  %> FOREACH
%>
